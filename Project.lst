Microsoft (R) Macro Assembler Version 14.43.34808.0	    03/15/25 05:52:37
<Project 6 - String Primitives and Macros     (Proj6_vanhaoe  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros     (Proj6_vanhaoe.asm)

				; Author: Ethan Van Hao
				; Last Modified: 3/15/2025
				; OSU email address: vanhaoe@oregonstate.edu
				; Course number/section:   CS271 Section 402
				; Project Number: 6 - String Primitives and Macros      Due Date: 3/16/25
				; Description: This program asks to be given a properly ASCII-formatted file to read and process.
				;              The program uses LODSB to properly go through each byte in the given file and converts the 
				;			   ASCII values into a numerical integer to be printed onto the console. The integers
				;			   are then placed into an array that is read backwards and printed onto the console
				;			   with its values separated by a global constant delimiter. The program can also
				;			   detect if the file is not able to be opened and closes itself. The program then
				;			   says goodbye and ends.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;----------------------------------------------------------------------
				;Name: mGetString
				;
				;Displays an input prompt and stores user input. 
				;
				;Preconditions: 
				;	Valid length of input string.
				;
				;Receives: 
				;	prompt:				Adress of prompt string
				;	maxLength:			Maximum number of characters
				;
				;Returns: 
				;	keyInput:			User's input string
				;	bytesRead:			Number of bytes read from the user
				;
				;----------------------------------------------------------------------
				mGetString MACRO prompt, keyInput, maxLength, bytesRead
					pushad
					mov		edx, prompt
					call	WriteString
					mov		edx, keyInput
					mov		ecx, maxLength
					call	ReadString
					mov		DWORD PTR [bytesRead], eax
					popad
				ENDM

				;----------------------------------------------------------------------
				;Name: mDisplayString
				;
				;Prints the string that was passed as a parameter to the macro.
				;
				;Preconditions: 
				;	String is stored in a specified memory location.
				;
				;Receives: 
				;	printString:		Address of the string to be printed
				;
				;Returns: 
				;	String is printed onto the console.
				;
				;----------------------------------------------------------------------
				mDisplayString MACRO printString
					push	edx
					mov		edx, printString
					call	WriteString
					pop		edx
				ENDM

				;----------------------------------------------------------------------
				;Name: mDisplayChar
				;
				;Prints the ASCII-formatted character that is passed as an immediate or constant
				;
				;Preconditions: 
				;	Parameter must be a valid ASCII character.
				;
				;Receives: 
				;	char:				Character to be displayed
				;
				;Returns: 
				;	Char is printed onto the console.
				;----------------------------------------------------------------------
				mDisplayChar MACRO char
					push	eax
					mov		al, char
					call	WriteChar
					pop		eax
				ENDM

 = 00000018			TEMPS_PER_DAY = 24
 = 0000002C			DELIMITER = ','

 00000000			.data

 00000000 50 72 6F 6A 65	programmer		BYTE	"Project 6 - String Primitives and Macros By Ethan Van Hao", 0
	   63 74 20 36 20
	   2D 20 53 74 72
	   69 6E 67 20 50
	   72 69 6D 69 74
	   69 76 65 73 20
	   61 6E 64 20 4D
	   61 63 72 6F 73
	   20 42 79 20 45
	   74 68 61 6E 20
	   56 61 6E 20 48
	   61 6F 00
 0000003A 57 65 6C 63 6F	intro1			BYTE	"Welcome! We are here to correct the data that our itern has acquired.", 0
	   6D 65 21 20 57
	   65 20 61 72 65
	   20 68 65 72 65
	   20 74 6F 20 63
	   6F 72 72 65 63
	   74 20 74 68 65
	   20 64 61 74 61
	   20 74 68 61 74
	   20 6F 75 72 20
	   69 74 65 72 6E
	   20 68 61 73 20
	   61 63 71 75 69
	   72 65 64 2E 00
 00000080 49 20 77 69 6C	intro2			BYTE	"I will read a file that stores a series of temperature values separated by a delimiter.", 0
	   6C 20 72 65 61
	   64 20 61 20 66
	   69 6C 65 20 74
	   68 61 74 20 73
	   74 6F 72 65 73
	   20 61 20 73 65
	   72 69 65 73 20
	   6F 66 20 74 65
	   6D 70 65 72 61
	   74 75 72 65 20
	   76 61 6C 75 65
	   73 20 73 65 70
	   61 72 61 74 65
	   64 20 62 79 20
	   61 20 64 65 6C
	   69 6D 69 74 65
	   72 2E 00
 000000D8 54 68 65 20 66	instruc1		BYTE	"The file provided must be properly ASCII-formatted. ", 0
	   69 6C 65 20 70
	   72 6F 76 69 64
	   65 64 20 6D 75
	   73 74 20 62 65
	   20 70 72 6F 70
	   65 72 6C 79 20
	   41 53 43 49 49
	   2D 66 6F 72 6D
	   61 74 74 65 64
	   2E 20 00
 0000010D 49 20 77 69 6C	instruc2		BYTE	"I will then reverse the order of the data and provide the correct order of temperature readings!", 0
	   6C 20 74 68 65
	   6E 20 72 65 76
	   65 72 73 65 20
	   74 68 65 20 6F
	   72 64 65 72 20
	   6F 66 20 74 68
	   65 20 64 61 74
	   61 20 61 6E 64
	   20 70 72 6F 76
	   69 64 65 20 74
	   68 65 20 63 6F
	   72 72 65 63 74
	   20 6F 72 64 65
	   72 20 6F 66 20
	   74 65 6D 70 65
	   72 61 74 75 72
	   65 20 72 65 61
	   64 69 6E 67 73
	   21 00
 0000016E 50 6C 65 61 73	filenamePrompt	BYTE	"Please enter the name of the file to be fixed: ", 0
	   65 20 65 6E 74
	   65 72 20 74 68
	   65 20 6E 61 6D
	   65 20 6F 66 20
	   74 68 65 20 66
	   69 6C 65 20 74
	   6F 20 62 65 20
	   66 69 78 65 64
	   3A 20 00
 0000019E 48 65 72 65 20	results			BYTE	"Here is the proper order of the temperatures!", 0
	   69 73 20 74 68
	   65 20 70 72 6F
	   70 65 72 20 6F
	   72 64 65 72 20
	   6F 66 20 74 68
	   65 20 74 65 6D
	   70 65 72 61 74
	   75 72 65 73 21
	   00
 000001CC 48 6F 70 65 66	goodbye			BYTE	"Hopefully that solved the problem, goodbye!", 0
	   75 6C 6C 79 20
	   74 68 61 74 20
	   73 6F 6C 76 65
	   64 20 74 68 65
	   20 70 72 6F 62
	   6C 65 6D 2C 20
	   67 6F 6F 64 62
	   79 65 21 00
 000001F8 45 72 72 6F 72	errorMsg		BYTE	"Error opening file.", 0
	   20 6F 70 65 6E
	   69 6E 67 20 66
	   69 6C 65 2E 00

 0000020C  00000032 [		filename		BYTE	50 DUP(0)
	    00
	   ]
 0000023E 00000000		bytesRead		DWORD	?
 00000242  000003E8 [		fileBuffer		BYTE	1000 DUP(0)
	    00
	   ]
 0000062A 00000000		fileHandle		HANDLE	?
 0000062E  00000018 [		tempArray		SDWORD	TEMPS_PER_DAY DUP(0)
	    00000000
	   ]

 00000000			.code
 00000000			main PROC
					;Introductions
					mDisplayString	OFFSET programmer
 00000000  52		     1		push	edx
 00000001  BA 00000000 R     1		mov		edx, OFFSET programmer
 00000006  E8 00000000 E     1		call	WriteString
 0000000B  5A		     1		pop		edx
 0000000C  E8 00000000 E		call			CrLf
 00000011  E8 00000000 E		call			CrLf
					mDisplayString	OFFSET intro1
 00000016  52		     1		push	edx
 00000017  BA 0000003A R     1		mov		edx, OFFSET intro1
 0000001C  E8 00000000 E     1		call	WriteString
 00000021  5A		     1		pop		edx
 00000022  E8 00000000 E		call			CrLf
					mDisplayString	OFFSET intro2
 00000027  52		     1		push	edx
 00000028  BA 00000080 R     1		mov		edx, OFFSET intro2
 0000002D  E8 00000000 E     1		call	WriteString
 00000032  5A		     1		pop		edx
 00000033  E8 00000000 E		call			CrLf
					mDisplayString	OFFSET instruc1
 00000038  52		     1		push	edx
 00000039  BA 000000D8 R     1		mov		edx, OFFSET instruc1
 0000003E  E8 00000000 E     1		call	WriteString
 00000043  5A		     1		pop		edx
 00000044  E8 00000000 E		call			CrLf
					mDisplayString	OFFSET instruc2
 00000049  52		     1		push	edx
 0000004A  BA 0000010D R     1		mov		edx, OFFSET instruc2
 0000004F  E8 00000000 E     1		call	WriteString
 00000054  5A		     1		pop		edx
 00000055  E8 00000000 E		call			CrLf
 0000005A  E8 00000000 E		call			CrLf

					;Get Filename
					mGetString		OFFSET filenamePrompt, OFFSET filename, SIZEOF filename, OFFSET bytesRead
 0000005F  60		     1		pushad
 00000060  BA 0000016E R     1		mov		edx, OFFSET filenamePrompt
 00000065  E8 00000000 E     1		call	WriteString
 0000006A  BA 0000020C R     1		mov		edx, OFFSET filename
 0000006F  B9 00000032	     1		mov		ecx, SIZEOF filename
 00000074  E8 00000000 E     1		call	ReadString
 00000079  A3 0000023E R     1		mov		DWORD PTR [OFFSET bytesRead], eax
 0000007E  61		     1		popad

					;Open File
 0000007F  BA 0000020C R		mov				edx, OFFSET filename
 00000084  E8 00000000 E		call			OpenInputFile
 00000089  83 F8 FF			cmp				eax, INVALID_HANDLE_VALUE
 0000008C  74 56			je				error								;jump to error if INVALID_HANDLE_VALUE raises
 0000008E  A3 0000062A R		mov				fileHandle, eax

					;Read File
 00000093  BA 00000242 R		mov				edx, OFFSET fileBuffer
 00000098  B9 000003E8			mov				ecx, LENGTHOF fileBuffer
 0000009D  E8 00000000 E		call			ReadFromFile
 000000A2  72 40			jc				error
 000000A4  A3 0000023E R		mov				bytesRead, eax

					;Close File
 000000A9  A1 0000062A R		mov				eax, fileHandle
 000000AE  E8 00000000 E		call			CloseFile

					;Parse Temps Procedure Stacking
 000000B3  68 00000242 R		push			OFFSET fileBuffer
 000000B8  68 0000062E R		push			OFFSET tempArray
 000000BD  E8 0000004B			call			ParseTempsFromString

					;Display Results
 000000C2  E8 00000000 E		call			CrLf
					mDisplayString	OFFSET results
 000000C7  52		     1		push	edx
 000000C8  BA 0000019E R     1		mov		edx, OFFSET results
 000000CD  E8 00000000 E     1		call	WriteString
 000000D2  5A		     1		pop		edx
 000000D3  E8 00000000 E		call			CrLf

					;Print Reverse Temps Procedure Stacking
 000000D8  68 0000062E R		push			OFFSET tempArray
 000000DD  E8 0000006F			call			WriteTempsReverse

					;End Program
 000000E2  EB 0C			jmp				exit_program

 000000E4			error:
					mDisplayString	OFFSET errorMsg
 000000E4  52		     1		push	edx
 000000E5  BA 000001F8 R     1		mov		edx, OFFSET errorMsg
 000000EA  E8 00000000 E     1		call	WriteString
 000000EF  5A		     1		pop		edx

 000000F0			exit_program:
 000000F0  E8 00000000 E		call			CrLf
 000000F5  E8 00000000 E		call			CrLf
					mDisplayString	OFFSET goodbye
 000000FA  52		     1		push	edx
 000000FB  BA 000001CC R     1		mov		edx, OFFSET goodbye
 00000100  E8 00000000 E     1		call	WriteString
 00000105  5A		     1		pop		edx

					Invoke ExitProcess,0	; exit to operating system
 00000106  6A 00	   *	    push   +000000000h
 00000108  E8 00000000 E   *	    call   ExitProcess
 0000010D			main ENDP

				;----------------------------------------------------------------------
				;ParseTempsFromString
				;
				;Converts a string of ASCII-formatted numbers to their numeric value representations and 
				;stores them into an array.
				;
				;Preconditions: 
				;	fileBuffer contains a string with proper ASCII-formatted numbers.
				;	tempArray has enough allocated space for TEMPS_PER_DAY.
				;
				;Postconditions: 
				;	tempArray contains the converted numerical values.
				;
				;Receives: 
				;	[EBP+12]	= fileBuffer
				;	[EBP+8]		= tempArray
				;	[EBP+4]		= return adress
				;	[EBP]		= old ebp
				;
				;Returns: 
				;	An array with the converted numerical value representations.
				;
				;----------------------------------------------------------------------

 0000010D			ParseTempsFromString PROC
 0000010D  55				push			ebp
 0000010E  8B EC			mov				ebp, esp							;establish new stack
 00000110  60				pushad												

 00000111  8B 75 0C			mov				esi, [ebp+12]						;fileBuffer
 00000114  8B 7D 08			mov				edi, [ebp+8]						;tempArray
 00000117  B9 00000018			mov				ecx, TEMPS_PER_DAY

 0000011C			parse_loop:
					;reset variables for new temp
 0000011C  33 C0			xor				eax, eax
 0000011E  33 D2			xor				edx, edx
 00000120  33 DB			xor				ebx, ebx

					;check for negative sign
 00000122  AC				lodsb												;load first char
 00000123  3C 2D			cmp				al, '-'
 00000125  75 06			jne				digit_processing
 00000127  BB 00000001			mov				ebx, 1
 0000012C  AC				lodsb												;load next char

 0000012D			digit_processing:
					;convert ASCII digits to int
 0000012D  3C 2C			cmp				al, DELIMITER
 0000012F  74 0E			je				store_value							;end if delimiter
 00000131  3C 00			cmp				al, 0
 00000133  74 0A			je				store_value							;end if null

 00000135  2C 30			sub				al, '0'
 00000137  6B D2 0A			imul			edx, 10
 0000013A  03 D0			add				edx, eax
 0000013C  AC				lodsb
 0000013D  EB EE			jmp				digit_processing

 0000013F			store_value:
 0000013F  85 DB			test			ebx, ebx
 00000141  74 02			jz				positive_value						;check if neg
 00000143  F7 DA			neg				edx

 00000145			positive_value:
					;store converted value in array
 00000145  89 17			mov				[edi], edx
 00000147  83 C7 04			add				edi, 4

					;loop until temps are processed
 0000014A  E2 D0			loop			parse_loop

 0000014C  61				popad
 0000014D  5D				pop				ebp
 0000014E  C2 0008			ret				8
 00000151			ParseTempsFromString ENDP

				;----------------------------------------------------------------------
				;WriteTempsReverse
				;
				;Prints an SDWORD integer array to the console that has its integers separated by
				;a delimiter character. It is printed in the reverse order that it is stored in the
				;array.
				;
				;Preconditions: 
				;	tempArray contains TEMPS_PER_DAY SDWORD integers.
				;
				;Postconditions: 
				;	tempArray is printed in reverse order to the console.
				;
				;Receives: 
				;	[EBP+8]		= tempArray
				;	[EBP+4]		= return adress
				;	[EBP]		= old ebp
				;
				;Returns: 
				;	The tempArray is printed in reverse to the console with its elements separated by a
				;	delimiter.
				;
				;----------------------------------------------------------------------
 00000151			WriteTempsReverse PROC
 00000151  55				push			ebp
 00000152  8B EC			mov				ebp, esp
 00000154  56				push			esi
 00000155  51				push			ecx
 00000156  50				push			eax

 00000157  8B 75 08			mov				esi, [ebp+8]						;start of array
 0000015A  83 C6 5C			add				esi, (TEMPS_PER_DAY-1)*4			;start at last element
 0000015D  B9 00000018			mov				ecx, TEMPS_PER_DAY

 00000162			print_loop:
					;print current temp
 00000162  8B 06			mov				eax, [esi]
 00000164  E8 00000000 E		call			WriteInt							;display sign	

					;print delimiter
					mDisplayChar	DELIMITER
 00000169  50		     1		push	eax
 0000016A  B0 2C	     1		mov		al, DELIMITER
 0000016C  E8 00000000 E     1		call	WriteChar
 00000171  58		     1		pop		eax

					;move to previous array element
 00000172  83 EE 04			sub				esi, 4
 00000175  E2 EB			loop			print_loop

 00000177  58				pop				eax
 00000178  59				pop				ecx
 00000179  5E				pop				esi
 0000017A  5D				pop				ebp
 0000017B  C2 0004			ret				4
 0000017E			WriteTempsReverse ENDP

				END main
Microsoft (R) Macro Assembler Version 14.43.34808.0	    03/15/25 05:52:37
<Project 6 - String Primitives and Macros     (Proj6_vanhaoe  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayChar . . . . . . . . . .	Proc
mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000068E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000017E Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseTempsFromString . . . . . .	P Near	 0000010D _TEXT	Length= 00000044 Public STDCALL
  parse_loop . . . . . . . . . .	L Near	 0000011C _TEXT	
  digit_processing . . . . . . .	L Near	 0000012D _TEXT	
  store_value  . . . . . . . . .	L Near	 0000013F _TEXT	
  positive_value . . . . . . . .	L Near	 00000145 _TEXT	
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteTempsReverse  . . . . . . .	P Near	 00000151 _TEXT	Length= 0000002D Public STDCALL
  print_loop . . . . . . . . . .	L Near	 00000162 _TEXT	
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000010D Public STDCALL
  error  . . . . . . . . . . . .	L Near	 000000E4 _TEXT	
  exit_program . . . . . . . . .	L Near	 000000F0 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DELIMITER  . . . . . . . . . . .	Number	 0000002Ch   
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TEMPS_PER_DAY  . . . . . . . . .	Number	 00000018h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 0000023E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorMsg . . . . . . . . . . . .	Byte	 000001F8 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileBuffer . . . . . . . . . . .	Byte	 00000242 _DATA	
fileHandle . . . . . . . . . . .	DWord	 0000062A _DATA	
filenamePrompt . . . . . . . . .	Byte	 0000016E _DATA	
filename . . . . . . . . . . . .	Byte	 0000020C _DATA	
goodbye  . . . . . . . . . . . .	Byte	 000001CC _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instruc1 . . . . . . . . . . . .	Byte	 000000D8 _DATA	
instruc2 . . . . . . . . . . . .	Byte	 0000010D _DATA	
intro1 . . . . . . . . . . . . .	Byte	 0000003A _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000080 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
programmer . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
results  . . . . . . . . . . . .	Byte	 0000019E _DATA	
tempArray  . . . . . . . . . . .	DWord	 0000062E _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
